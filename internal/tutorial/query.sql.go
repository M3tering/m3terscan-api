// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package tutorial

import (
	"context"
)

const addProposalMeter = `-- name: AddProposalMeter :exec
INSERT INTO proposal_meters (proposal_id, m3ter_no, account, nonce)
VALUES (?, ?, ?, ?)
`

type AddProposalMeterParams struct {
	ProposalID string
	M3terNo    int64
	Account    string
	Nonce      string
}

func (q *Queries) AddProposalMeter(ctx context.Context, arg AddProposalMeterParams) error {
	_, err := q.db.ExecContext(ctx, addProposalMeter,
		arg.ProposalID,
		arg.M3terNo,
		arg.Account,
		arg.Nonce,
	)
	return err
}

const createProposal = `-- name: CreateProposal :one
INSERT INTO proposals (id)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateProposal(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, createProposal, id)
	err := row.Scan(&id)
	return id, err
}

const getProposalMeters = `-- name: GetProposalMeters :many
SELECT m3ter_no, account, nonce
FROM proposal_meters
WHERE proposal_id = ?
`

type GetProposalMetersRow struct {
	M3terNo int64
	Account string
	Nonce   string
}

func (q *Queries) GetProposalMeters(ctx context.Context, proposalID string) ([]GetProposalMetersRow, error) {
	rows, err := q.db.QueryContext(ctx, getProposalMeters, proposalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProposalMetersRow
	for rows.Next() {
		var i GetProposalMetersRow
		if err := rows.Scan(&i.M3terNo, &i.Account, &i.Nonce); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
